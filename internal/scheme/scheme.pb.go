// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.11.4
// source: scheme.proto

package scheme

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address  string `protobuf:"bytes,1,opt,name=Address,proto3" json:"Address,omitempty"`
	Login    string `protobuf:"bytes,2,opt,name=Login,proto3" json:"Login,omitempty"`
	Password string `protobuf:"bytes,3,opt,name=Password,proto3" json:"Password,omitempty"`
}

func (x *Request) Reset() {
	*x = Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheme_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_scheme_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_scheme_proto_rawDescGZIP(), []int{0}
}

func (x *Request) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Request) GetLogin() string {
	if x != nil {
		return x.Login
	}
	return ""
}

func (x *Request) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=Address,proto3" json:"Address,omitempty"`
}

func (x *Address) Reset() {
	*x = Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheme_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Address) ProtoMessage() {}

func (x *Address) ProtoReflect() protoreflect.Message {
	mi := &file_scheme_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Address.ProtoReflect.Descriptor instead.
func (*Address) Descriptor() ([]byte, []int) {
	return file_scheme_proto_rawDescGZIP(), []int{1}
}

func (x *Address) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type Login struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Login string `protobuf:"bytes,1,opt,name=Login,proto3" json:"Login,omitempty"`
}

func (x *Login) Reset() {
	*x = Login{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheme_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Login) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Login) ProtoMessage() {}

func (x *Login) ProtoReflect() protoreflect.Message {
	mi := &file_scheme_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Login.ProtoReflect.Descriptor instead.
func (*Login) Descriptor() ([]byte, []int) {
	return file_scheme_proto_rawDescGZIP(), []int{2}
}

func (x *Login) GetLogin() string {
	if x != nil {
		return x.Login
	}
	return ""
}

type Password struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Password string `protobuf:"bytes,1,opt,name=Password,proto3" json:"Password,omitempty"`
}

func (x *Password) Reset() {
	*x = Password{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheme_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Password) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Password) ProtoMessage() {}

func (x *Password) ProtoReflect() protoreflect.Message {
	mi := &file_scheme_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Password.ProtoReflect.Descriptor instead.
func (*Password) Descriptor() ([]byte, []int) {
	return file_scheme_proto_rawDescGZIP(), []int{3}
}

func (x *Password) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type Answer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Allow bool `protobuf:"varint,1,opt,name=Allow,proto3" json:"Allow,omitempty"`
}

func (x *Answer) Reset() {
	*x = Answer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheme_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Answer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Answer) ProtoMessage() {}

func (x *Answer) ProtoReflect() protoreflect.Message {
	mi := &file_scheme_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Answer.ProtoReflect.Descriptor instead.
func (*Answer) Descriptor() ([]byte, []int) {
	return file_scheme_proto_rawDescGZIP(), []int{4}
}

func (x *Answer) GetAllow() bool {
	if x != nil {
		return x.Allow
	}
	return false
}

var File_scheme_proto protoreflect.FileDescriptor

var file_scheme_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x22, 0x55, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x23, 0x0a,
	0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x22, 0x1d, 0x0a, 0x05, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x22, 0x26, 0x0a, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x1e, 0x0a, 0x06, 0x41, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x32, 0xcd, 0x01, 0x0a, 0x0d, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x08, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x41, 0x6c, 0x6c, 0x12, 0x0f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x65, 0x2e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x0c, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x0f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x65, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x0e, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x65, 0x2e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x0d, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x10, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x65, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x1a, 0x0e, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x65, 0x2e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x0a,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x0d, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x1a, 0x0e, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x65, 0x2e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x42, 0x0a, 0x5a, 0x08, 0x2e, 0x3b, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_scheme_proto_rawDescOnce sync.Once
	file_scheme_proto_rawDescData = file_scheme_proto_rawDesc
)

func file_scheme_proto_rawDescGZIP() []byte {
	file_scheme_proto_rawDescOnce.Do(func() {
		file_scheme_proto_rawDescData = protoimpl.X.CompressGZIP(file_scheme_proto_rawDescData)
	})
	return file_scheme_proto_rawDescData
}

var file_scheme_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_scheme_proto_goTypes = []interface{}{
	(*Request)(nil),  // 0: scheme.Request
	(*Address)(nil),  // 1: scheme.Address
	(*Login)(nil),    // 2: scheme.Login
	(*Password)(nil), // 3: scheme.Password
	(*Answer)(nil),   // 4: scheme.Answer
}
var file_scheme_proto_depIdxs = []int32{
	0, // 0: scheme.EventsHandler.CheckAll:input_type -> scheme.Request
	1, // 1: scheme.EventsHandler.CheckAddress:input_type -> scheme.Address
	3, // 2: scheme.EventsHandler.CheckPassword:input_type -> scheme.Password
	2, // 3: scheme.EventsHandler.CheckLogin:input_type -> scheme.Login
	4, // 4: scheme.EventsHandler.CheckAll:output_type -> scheme.Answer
	4, // 5: scheme.EventsHandler.CheckAddress:output_type -> scheme.Answer
	4, // 6: scheme.EventsHandler.CheckPassword:output_type -> scheme.Answer
	4, // 7: scheme.EventsHandler.CheckLogin:output_type -> scheme.Answer
	4, // [4:8] is the sub-list for method output_type
	0, // [0:4] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_scheme_proto_init() }
func file_scheme_proto_init() {
	if File_scheme_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_scheme_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheme_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheme_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Login); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheme_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Password); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheme_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Answer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_scheme_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_scheme_proto_goTypes,
		DependencyIndexes: file_scheme_proto_depIdxs,
		MessageInfos:      file_scheme_proto_msgTypes,
	}.Build()
	File_scheme_proto = out.File
	file_scheme_proto_rawDesc = nil
	file_scheme_proto_goTypes = nil
	file_scheme_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// EventsHandlerClient is the client API for EventsHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EventsHandlerClient interface {
	CheckAll(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Answer, error)
	CheckAddress(ctx context.Context, in *Address, opts ...grpc.CallOption) (*Answer, error)
	CheckPassword(ctx context.Context, in *Password, opts ...grpc.CallOption) (*Answer, error)
	CheckLogin(ctx context.Context, in *Login, opts ...grpc.CallOption) (*Answer, error)
}

type eventsHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewEventsHandlerClient(cc grpc.ClientConnInterface) EventsHandlerClient {
	return &eventsHandlerClient{cc}
}

func (c *eventsHandlerClient) CheckAll(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Answer, error) {
	out := new(Answer)
	err := c.cc.Invoke(ctx, "/scheme.EventsHandler/CheckAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsHandlerClient) CheckAddress(ctx context.Context, in *Address, opts ...grpc.CallOption) (*Answer, error) {
	out := new(Answer)
	err := c.cc.Invoke(ctx, "/scheme.EventsHandler/CheckAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsHandlerClient) CheckPassword(ctx context.Context, in *Password, opts ...grpc.CallOption) (*Answer, error) {
	out := new(Answer)
	err := c.cc.Invoke(ctx, "/scheme.EventsHandler/CheckPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsHandlerClient) CheckLogin(ctx context.Context, in *Login, opts ...grpc.CallOption) (*Answer, error) {
	out := new(Answer)
	err := c.cc.Invoke(ctx, "/scheme.EventsHandler/CheckLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventsHandlerServer is the server API for EventsHandler service.
type EventsHandlerServer interface {
	CheckAll(context.Context, *Request) (*Answer, error)
	CheckAddress(context.Context, *Address) (*Answer, error)
	CheckPassword(context.Context, *Password) (*Answer, error)
	CheckLogin(context.Context, *Login) (*Answer, error)
}

// UnimplementedEventsHandlerServer can be embedded to have forward compatible implementations.
type UnimplementedEventsHandlerServer struct {
}

func (*UnimplementedEventsHandlerServer) CheckAll(context.Context, *Request) (*Answer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAll not implemented")
}
func (*UnimplementedEventsHandlerServer) CheckAddress(context.Context, *Address) (*Answer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAddress not implemented")
}
func (*UnimplementedEventsHandlerServer) CheckPassword(context.Context, *Password) (*Answer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckPassword not implemented")
}
func (*UnimplementedEventsHandlerServer) CheckLogin(context.Context, *Login) (*Answer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckLogin not implemented")
}

func RegisterEventsHandlerServer(s *grpc.Server, srv EventsHandlerServer) {
	s.RegisterService(&_EventsHandler_serviceDesc, srv)
}

func _EventsHandler_CheckAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsHandlerServer).CheckAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scheme.EventsHandler/CheckAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsHandlerServer).CheckAll(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventsHandler_CheckAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Address)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsHandlerServer).CheckAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scheme.EventsHandler/CheckAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsHandlerServer).CheckAddress(ctx, req.(*Address))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventsHandler_CheckPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Password)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsHandlerServer).CheckPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scheme.EventsHandler/CheckPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsHandlerServer).CheckPassword(ctx, req.(*Password))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventsHandler_CheckLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Login)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsHandlerServer).CheckLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scheme.EventsHandler/CheckLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsHandlerServer).CheckLogin(ctx, req.(*Login))
	}
	return interceptor(ctx, in, info, handler)
}

var _EventsHandler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "scheme.EventsHandler",
	HandlerType: (*EventsHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckAll",
			Handler:    _EventsHandler_CheckAll_Handler,
		},
		{
			MethodName: "CheckAddress",
			Handler:    _EventsHandler_CheckAddress_Handler,
		},
		{
			MethodName: "CheckPassword",
			Handler:    _EventsHandler_CheckPassword_Handler,
		},
		{
			MethodName: "CheckLogin",
			Handler:    _EventsHandler_CheckLogin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "scheme.proto",
}
